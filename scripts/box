#!/bin/bash
#
# [servidor HD :: box management solution]
# `box -h` for commands and info
#
# Author             :  liara, ajvulcan
#
#       SERVIDOR HD 2019
#
# Licensed under GNU General Public License v3.0 GPL-3 (in short)
##   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#################################################################################

function _intro() {
  whiptail --title "SERVIDOR HD control de paquetes" --msgbox "Bienvenido a Box! Usando este script puedes elegir instalar o eliminar los paquetes dentro del repositorio servidor HD. Usa las teclas de flecha para navegar, barra espaciadora para seleccionar los elementos y enter para continuar." 15 50
}

function _function() {
  function=$(whiptail --title "Servidor HD" --menu "Elige una opción:" --ok-button "Continuar" --nocancel 12 50 3 \
               Install "packages" \
               Remove "packages" \
               Exit "" 3>&1 1>&2 2>&3)

    if [[ $function == Install ]]; then
      _install
    elif [[ $function == Remove ]]; then
      _remove
    elif [[ $function == Exit ]]; then
      exit 0
    fi
}

function _install() {
  installa=()
  locks=($(find /usr/local/bin/swizzin/install -type f -printf "%f\n" | cut -d "." -f 1 | sort -d))
  for i in "${locks[@]}"; do
    app=${i}
    if [[ ! -f /install/.$app.lock ]]; then
      installa+=("$i" '""')
    fi
  done
  whiptail --title "Instalar Software" --checklist --noitem --separate-output "Elige:" 15 26 7 "${installa[@]}" 2>results
  
  readarray result < results
  for i in "${result[@]}"; do
    result=$(echo $i)
    echo -e "Instalando ${result}"
    bash /usr/local/bin/swizzin/install/${result}.sh
  done

   rm results
  _function
}

function _remove() {
removea=()
locks=($(find /usr/local/bin/swizzin/remove -type f -printf "%f\n" | cut -d "." -f 1 | sort -d))
for i in "${locks[@]}"; do
  app=${i}
  if [[ -f /install/.$app.lock ]]; then
    removea+=("$i" '""')
  fi
done
whiptail --title "Eliminar Software" --noitem --checklist --separate-output "Elige:" 15 26 7 "${removea[@]}" 2>results
  readarray result < results
  for i in "${result[@]}"; do
    result=$(echo $i)
    echo -e "Eliminando ${result}"
    bash /usr/local/bin/swizzin/remove/${result}.sh
  done
rm results
_function
}

function _cli() {
  arg=("$@")
  packages=("${arg[@]:1}")
  repo=($(find /usr/local/bin/swizzin/install -type f -printf "%f\n" | cut -d "." -f 1))
  for i in "${packages[@]}"; do
    app=${i}
    if [[ -f /install/.${app}.lock ]]; then
      echo -e "El paquete $i ya está instalado"
    else
      if [[ "${repo[*]}" =~ $i ]]; then
        echo -e "Instalando $i "
        bash /usr/local/bin/swizzin/install/$i.sh
      else
        echo -e "Paquete $i no encontrado"
      fi
    fi
  done
}

function _clr() {
  arg=("$@")
  packages=("${arg[@]:1}")
  for i in "${packages[@]}"; do
    app=${i}
    if [[ -f /install/.$app.lock ]]; then
      echo -e "Eliminando $i "
      bash /usr/local/bin/swizzin/remove/$i.sh
    else
      echo -e "Paquete $i no instalado"
    fi
  done
}

function _update() {
# echo -e "Actualización automática DESHABILITADA"
  echo -e "Actualizando el repositorio local de Servidor HD"
  echo "Esto sobreescribirá Servidor HD desde el repositorio de Github, ¿Está seguro? (escriba SI, no por defecto)"
  read respuesta

case $respuesta in
  "SI" ) echo "Comienza la actualización ..."; 
          cd /etc/swizzin ;
          git checkout master;
          git fetch origin master;
          git reset --hard origin/master;
          #git pull;
          chmod -R 700 /etc/swizzin/scripts;
          for f in /etc/swizzin/scripts/update/*; do . $f; done ;
          echo "Actualización finalizada."
          ;;
  * ) echo "Actualización cancelada";;
esac
    
}

function _upgrade() {
  arg=("$@")
  packages=("${arg[@]:1}")
  repo=($(find /usr/local/bin/swizzin/upgrade -type f -printf "%f\n" | cut -d "." -f 1))
  for i in "${packages[@]}"; do
    app=${i}
    if [[ "${repo[*]}" =~ $i ]]; then
      echo -e "Mejorando $i "
      bash /usr/local/bin/swizzin/upgrade/$i.sh
    else
      echo -e "El script de mejora para $i no existe"
    fi
  done
}

function _help() {
  sgformat="${bold}%-15s${normal}"
  spacing=$(echo $'\t' | pr -Te15)

  echo -e "Usar:  `basename $0` [ install | remove | upgrade ] ${bold}pkg1 pkg2 [...]${normal}\n"
  echo -e "       `basename $0` [ adduser | deluser | chpasswd ] ${bold}username${normal}\n"
  echo -e "       `basename $0` [ list | update ]\n"
  echo -e "       `basename $0` panel fix-disk [ root | home ]\n"
  echo -e "       `basename $0`\n"
  echo -e "Nota: Solo instalar y eliminar permiten paquetes como argumento. List y update se ejecutan sin modificadores\n" | fmt --goal=66 --tagged-paragraph
  echo -e "\n"
  printf "${sgformat}" "install"
  echo -e "La función install requiere al menos un nombre de paquete como argumento pero admite múltiples\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
  echo -e "               Ejemplo: box install quassel syncthing znc\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
  printf "${sgformat}" "remove"
  echo -e "La función remove requiere al menos un nombre de paquete como argumento pero admite múltiples\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
  echo -e "               Ejemplo: box remove quassel syncthing znc\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
   printf "${sgformat}" "adduser"
  echo -e "La función adduser requiere un usuario, El usuario será creado\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
  echo -e "               Ejemplo: box adduser amiguete\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
   printf "${sgformat}" "deluser"
  echo -e "La función deluser requiere un usuario, el usuario será eliminado\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
  echo -e "               Ejemplo: box deluser exnovia\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
   printf "${sgformat}" "chpasswd"
  echo -e "La función chpasswd requiere un usuario, su contraseña será cambiada\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
  echo -e "               Ejemplo: box chpasswd amiguete\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
  printf "${sgformat}" "update"
  echo -e "El comando update actualizará tu repositorio local de servidor HD a la última versiony ejecutará scripts importantes\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
  printf "${sgformat}" "upgrade"
  echo -e "Ejecuta el script de mejora asociado.\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
  printf "${sgformat}" "panel fix-disk"
  echo -e "El comando panel fix-disk cambia el widget de disco del panel web a root o home\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
  printf "${sgformat}" "list"
  echo -e "El comando list mostrará la lista disponible de paquetes en Servidor HD\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
}

function _list() {
  repo=($(find /usr/local/bin/swizzin/install -type f -printf "%f\n" | cut -d. -f 1 | sort -d))
  if [[ -f /srv/panel/inc/localize.php ]]; then
    lang=$(grep language /srv/panel/inc/localize.php | cut -d "'" -f 2)
    locale=/srv/panel/lang/$lang
  else
    locale=/etc/swizzin/sources/lang_en
  fi
  for i in "${repo[@]}"; do
    app=$i
    if [[ $i == ombi ]]; then app=ombi; fi
    sgformat="${bold}%-15s${normal}"
    spacing=$(echo $'\t' | pr -Te15)
    description=$(grep -i -m 1 \\\[\'$app $locale | cut -d= -f2 | sed "s/ '//g" | sed "s/';//g" | sed "s/\\\'/'/g")
    if [[ -z $description ]]; then description="Description missing";fi
    printf "${sgformat}" "$i"
    echo -e "${description}\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"

  done
}

function _adduser {
  user=$2
  if [[ $user =~ [A-Z] ]]; then
    echo "Nombres de usuario no pueden contener mayúsculas. Prueba de nuevo."
    exit 1
  fi

  if [[ -f /root/${user}.info ]]; then
    echo "El usuario ya existe"
    exit 1
  fi

  id -u ${user} > /dev/null 2>&1
  existing=$?

  if [[ $existing == 0 ]]; then
    echo "${user} ya está presente en esta máquina, sin embargo no está configurado como un usuario de Servidor HD"
    echo
    read -rep 'Presiona enter para continuar añadiéndolo como usuario.'
    echo
  fi

  echo -e "Introduce la contraseña para ${user}. (dejar vacío para generarla automáticamente)"; read 'pass'

  if [[ -z "${pass}" ]]; then
    pass="$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c16)"
    echo "La contraseña ${user} se ha establecido como ${pass}"
  fi
  if [[ -n $(which cracklib-check) ]]; then 
    echo "Cracklib detectado. Comprobando fortaleza de contraseña."
    sleep 1
    str="$(cracklib-check <<<"$pass")"
    check=$(grep OK <<<"$str")
    if [[ -z $check ]]; then
      read -n 1 -s -r -p "La contraseña no ha pasado el test de cracklib. Presiona cualquier tecla para introducir nueva contraseña."
      printf "\n"
      _adduser "$@"
    else
      echo "OK"
    fi
  fi
  echo "$user:$pass" > /root/${user}.info
  if [[ $existing == 1 ]]; then
    useradd "${user}" -m -G www-data -s /bin/bash
  fi
  chpasswd<<<"${user}:${pass}"
  htpasswd -b /etc/htpasswd $user $pass
  mkdir -p /etc/htpasswd.d/
  htpasswd -b -c /etc/htpasswd.d/htpasswd.${user} $user $pass
  chmod 550 /home/${user}
  echo "D /var/run/${user} 0750 ${user} ${user} -" >> /etc/tmpfiles.d/${user}.conf
  systemd-tmpfiles /etc/tmpfiles.d/${user}.conf --create

  for app in rtorrent rutorrent deluge autodl flood nzbget lounge; do
    if [[ $app = "rutorrent" ]]; then
      if [[ -d /srv/rutorrent ]]; then
        if [[ ! -f /install/.rutorrent.lock ]]; then touch /install/.rutorrent.lock; fi
      fi
    fi

    if [[ -f /install/.${app}.lock ]]; then
      if [[ $app = "flood" ]]; then
        /usr/local/bin/swizzin/install/${app}.sh
      else
        /usr/local/bin/swizzin/install/${app}.sh ${user}
        if [[ $app = "deluge" ]]; then
          /usr/local/bin/swizzin/nginx/deluge.sh ${user}
          app="{deluged,deluge-web}"
          eval systemctl enable ${app}@${user}
          eval systemctl start ${app}@${user}
        elif [[ $app =~ ("rutorrent"|"lounge") ]]; then
          :
        else
          if [[ $app = "autodl" ]]; then app=irssi; fi
          systemctl enable ${app}@${user}
          systemctl start ${app}@${user}
        fi
      fi
    fi
  done

  USER=${user^^}
  cat > /etc/sudoers.d/${user} <<SUD
Cmnd_Alias   ${USER}CMDS = /bin/systemctl stop flood@${user}, /bin/systemctl restart flood@${user}, /bin/systemctl start flood@${user}, /bin/systemctl start rtorrent@${user}, /bin/systemctl stop rtorrent@${user}, /bin/systemctl restart rtorrent@${user}, /bin/systemctl start deluged@${user}, /bin/systemctl stop deluged@${user}, /bin/systemctl restart deluged@${user}, /bin/systemctl start deluge-web@${user}, /bin/systemctl stop deluge-web@${user}, /bin/systemctl restart deluge-web@${user}, /bin/systemctl start irssi@${user}, /bin/systemctl stop irssi@${user}, /bin/systemctl restart irssi@${user}, /usr/local/bin/swizzin/box chpasswd ${user}

${user}     ALL = (ALL) NOPASSWD: ${USER}CMDS
SUD
if [[ -f /install/.nginx.lock ]]; then
  systemctl reload nginx
fi

#Enlace a carpeta de descargas central
administrador="$(awk '{print $1; exit}' /etc/sudoers.d/swizzin)"
echo "/home/${administrador}/DESCARGAS  /home/${user}/DESCARGAS   none    bind    0       0" >> /etc/fstab

#Crea carpeta personal de usuario
 mkdir /home/${user}/PERSONAL
 chmod 770 /home/${user}/PERSONAL
 chown $user:$user /home/${user}/PERSONAL

 echo "Carpetas DESCARGAS y PERSONAL de ${user} creadas."

#Nube, para rclone o plexdrive
 mkdir /home/${user}/NUBE
 chmod 775 /home/${user}/NUBE
 chown $user:$user /home/${user}/NUBE

 echo "Carpeta para nube creada."

#Añado usuario a acceso emby
htpasswd -b /etc/htpasswd.d/htpasswd.emby $user $pass
echo "Añado el usuario ${user} a acceso emby."
echo " "

#Permiso SSH
echo "¿Quiere que este usuario tenga acceso a consola SSH? s/N (Por defecto N)"
read permisoSSH

case $permisoSSH in
  "s" ) echo "Dado permisos SSH a ${user} ..."; 
          addgroup ${user} sshuser ;
          ;;
  * ) echo "NO se le dan permisos SSH";;
esac

#Permisos especiales
chmod 550 /home/${user}
setfacl -R -m user:${administrador}:rwx /home/${user}

#Mensaje recordatorio
echo "Recuerda reiniciar el sistema para enlazar la carpeta descargas en el fstab"

#echo "export PATH=$PATH:/usr/local/bin/swizzin" >> /home/$user/.profile
#chown $user: /home/$user/.profile
}

function _deluser {
  user=$2
  if [[ ! -f /root/${user}.info ]]; then
    master=$(cut -d: -f1 < /root/.master.info)
    if [[ $user == $master ]]; then
      echo "No puedes eliminar el usuario maestro."
      exit 1
    fi
    echo "Error: usuario ${user} no encontrado. Saliendo."
    exit 1
  fi

if [ -d /home/${user}/DESCARGAS ];

then
  echo "OJO, LA CARPETA DESCARGAS SIGUE EXISTIENDO, QUITALO EL ENLACE DURO DESDE /ETC/FSTAB, Y REINICIA EL SISTEMA O BORRARAS DATOS AJENOS."
  echo  "SALIENDO..."
  exit 1

else
	echo
	echo "ADVERTENCIA: Esto borrará el usuario '${user}' y todas sus configuraciones y directorio asociados. ESTA ACCIÓN ES DEFINITIVA."
	echo
fi

  read -rep 'La eliminación empezará tan pronto como confirmes este mensaje. Presiona enter para continuar.'

  for app in rtorrent rutorrent deluge autodl flood nzbget lounge; do
    if [[ $app = "rutorrent" ]]; then
      if [[ -d /srv/rutorrent ]]; then
        if [[ ! -f /install/.rutorrent.lock ]]; then touch /install/.rutorrent.lock; fi
      fi
    fi

    if [[ -f /install/.${app}.lock ]]; then
      if [[ $app = "rutorrent" ]]; then
        rm -rf /srv/rutorrent/conf/users/${user}
        rm -rf /srv/rutorrent/share/users/${user}
        rm -f /etc/nginx/apps/${user}*
      elif [[ $app = "lounge" ]]; then
        rm -f /home/lounge/.lounge/users/${user}.json
      elif [[ $app = "deluge" ]]; then
        app="{deluged,deluge-web}"
        rm -rf /etc/nginx/conf.d/${user}.deluge.conf
        eval systemctl disable ${app}@${user}
        eval systemctl stop ${app}@${user}
      else
        systemctl disable ${app}@${user}
        systemctl stop ${app}@${user}
      fi
    fi
  done
  
  if [[ -z $(which lsof) ]]; then
    apt-get install -y -q lsof > /dev/null 2>&1
  fi

  kill -9 $(lsof -t /home/${user})
  deluser --force --remove-home ${user}
  groupdel ${user}
  rm -f /etc/htpasswd.d/htpasswd.${user}
  htpasswd -D /etc/htpasswd ${user}
  rm -f /etc/tmpfiles.d/${user}.conf
  rm -f /etc/nginx/conf.d/${user}*
  rm -f /etc/sudoers.d/${user}
  rm -rf /var/run/${user}
  rm -rf /home/${user}
  rm /root/${user}.info
  service nginx reload

#Elimino el usuario en FSTAB para carpeta descargas
sed -i '/${user}/d' /etc/fstab
#Elimino el usuario de emby
sed -i '/'${user}'/d' /etc/htpasswd.d/htpasswd.emby

}

function _chpasswd {
  user=$2
  echo -e "Introduce una nueva contraseña para ${user}. Deja vacía para generar una contraseña"; read 'pass'
  if [[ -z "${pass}" ]]; then
    pass="$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c16)"
    echo "La nueva contraseña se ha establecido para ${pass}"
  fi
  if [[ -n $(which cracklib-check) ]]; then 
    echo "Cracklib detectado. Comprobando fortaleza de contraseña."
    sleep 1
    str="$(cracklib-check <<<"$pass")"
    check=$(grep OK <<<"$str")
    if [[ -z $check ]]; then
      read -n 1 -s -r -p "La contraseña no pasa la comprobación de cracklib. Presiona cualquier tecla para introducir una nueva contraseña."
      printf "\n"
      _chpasswd "$@"
    else
      echo "OK"
    fi
  fi
  master=$(cut -d: -f1 < /root/.master.info)
  if [[ $user = $master ]]; then
    echo "$user:$pass" > /root/.master.info
  fi
  echo "$user:$pass" > /root/${user}.info
  
  #Usuario de acceso web
  chpasswd<<<"${user}:${pass}"
  htpasswd -b /etc/htpasswd $user $pass
  mkdir -p /etc/htpasswd.d/
  htpasswd -b -c /etc/htpasswd.d/htpasswd.${user} $user $pass
  
  #Elimino el usuario de emby web
  sed -i '/'${user}'/d' /etc/htpasswd.d/htpasswd.emby
  #Añado usuario a acceso emby web
  htpasswd -b /etc/htpasswd.d/htpasswd.emby $user $pass

  #Borrado de user deluge
  if [[ -e /install/.deluge.lock ]]; then
    systemctl stop deluged@${user}
    systemctl stop deluge-web@${user}
    DWSALT=$(tr -dc 'a-zA-Z0-9' < /dev/urandom | fold -w 32 | head -n 1)
    DWP=$(python /usr/local/bin/swizzin/deluge.Userpass.py ${pass} ${DWSALT})
    sed -i "s/.*${user}.*/${user}:${pass}:10/" /home/$user/.config/deluge/auth
    sed -i "s/.*pwd_salt.*/  \"pwd_salt\": \"${DWSALT}\",/" /home/$user/.config/deluge/web.conf
    sed -i "s/.*pwd_sha1.*/  \"pwd_sha1\": \"${DWP}\",/" /home/$user/.config/deluge/web.conf
    sed -i "/$user/{n;s/.*/      \"${pass}\"/}" /home/${user}/.config/deluge/hostlist.conf.1.2
    systemctl start deluged@${user}
    systemctl start deluge-web@${user}
  fi
}

function _panel () {
  if [[ $2 != "fix-disk" ]]; then
    echo "el comando solo acepta el argumento fix-disk por el momento"
    exit 1
  fi
  /usr/local/bin/swizzin/panel/fix-disk $3
}

function _nukeovh() {
  grsec=$(uname -a | grep -i grs)
  if [[ -n $grsec ]]; then
    echo
    echo -e "Tu servidor actualmente corre con la versión de kernel siguiente: $(uname -r)"
    echo -e "Mientras no se requiera cambiar, los kernels con grsec nos están recomendados por conflictos con el panel y otros paquetes."
    echo
    echo -ne "¿Quieres que Servidor HD instale una distribución del kernel? Would you like swizzin to install the distribution kernel? (Por defecto: Y) "; read input
      case $input in
        [yY] | [yY][Ee][Ss] | "" ) kernel=yes; echo "Se instalará la versión de kernel de tu distribución, se requiere un reinicio después."  ;;
        [nN] | [nN][Oo] ) echo "¿Porque has ejecutado esta función entonces?" exit 1 ;;
      *) kernel=yes; echo "Se instalará la versión de kernel de tu distribución, se requiere un reinicio después."  ;;
      esac
      if [[ $kernel == yes ]]; then
        if [[ $DISTRO == Ubuntu ]]; then
          apt-get install -q -y linux-image-generic >>"${OUTTO}" 2>&1
        elif [[ $DISTRO == Debian ]]; then
          arch=$(uname -m)
          if [[ $arch =~ ("i686"|"i386") ]]; then
            apt-get install -q -y linux-image-686 >>"${OUTTO}" 2>&1
          elif [[ $arch == x86_64 ]]; then
            apt-get install -q -y linux-image-amd64 >>"${OUTTO}" 2>&1
          fi
        fi
        mv /etc/grub.d/06_OVHkernel /etc/grub.d/25_OVHkernel
        update-grub >>"${OUTTO}" 2>&1
      fi
    else
    echo
    echo -e "grsec no detectado. Nada que hacer."
  fi
}

normal=$(tput sgr0)
yellow=$(tput setaf 3)
bold=$(tput bold)

case "$1" in
  "")
    _intro
    _function
    exit 0
  ;;
  "help"|"-h")
    _help "$0"
    exit 0
  ;;
  "install"|"it")
    if [[ -z $2 ]]; then
      echo "Error: Debes seleccionar algún paquete"
      exit 1
    fi
    _cli "$@"
    exit 0
  ;;
  "remove"|"rm")
    if [[ -z $2 ]]; then
      echo "Error: Debes seleccionar algunos paquetes"
      exit 1
    fi
    _clr "$@"
    exit 0
  ;;
  "adduser")
    if [[ -z $2 ]]; then
      echo "Error: Debes especificar un usuario"
      exit 1
    fi
    if [[ -n $3 ]]; then
      echo -e "Error: demasiados argumentos\nUso correcto: box adduser <nombre de usuario>"
      exit 1
    fi
  _adduser "$@"
  exit 0
  ;;
  "deluser")
    if [[ -z $2 ]]; then
      echo -e "Error: debes especificar un nombre de usuario.\nUso correcto: box deluser <nombre de usuario>"
      exit 1
    fi
    if [[ -n $3 ]]; then
      echo -e "Error: demasiados argumentos\nUso correcto: box deluser <nombre de usuario>"
      exit 1
    fi
    _deluser "$@"
    exit 0
  ;;
  "chpasswd")
    if [[ -n $3 ]]; then
      echo -e "Error: demasiados argumentos\nUso correcto: box chpasswd <nombre de usuario>"
      exit 1
    fi
    _chpasswd "$@"
    exit 0
  ;;
  "panel")
    if [[ ! -f /install/.panel.lock ]]; then
      echo "Panel no instalado..."
      exit 1
    fi
    _panel "$@"
    exit 0
  ;;
  "rmgrsec")
    _nukeovh
    exit 0
  ;;
  "rtx")
    /usr/local/bin/swizzin/rtx
  ;;
  "update")
    _update
    exit 0
  ;;
  "upgrade")
    if [[ ! $2 ]]; then echo "Debes elegir al menos un paquete para actualizar."; exit 1; fi
    _update
    _upgrade "$@"
    exit 0
  ;;
  "list")
    _list
    exit 0
  ;;
  *)
    echo "Error: $1 comando no válido"
    exit 1
  ;;
esac
